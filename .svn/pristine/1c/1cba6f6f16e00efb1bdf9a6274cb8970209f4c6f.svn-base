/********************************************//**
* \file symulacja.h
* \brief Definicja obiektu symulacja
* \author Maciej Maciejewski
* \date   2015-04-23
***********************************************/

using namespace std;
#ifndef SIMULACJA_H
#define SIMULACJA_H
/////////////////////////////////////////////////
/*! \brief Symulacja.
*
*	Implementacja Symulacji.
*
*/

int czasGlobalny; 
//void sprawdzamDostepnoscZajmuje(Port pierwszy, Kanal wybrany){

//	if (pierwszy.czyMogeWplynac || (wybrany.zajetosc == 0)){
	//}
	//else
	//{
	//}

//}

bool czyMozeWplynac(Kanal &pierwszy, Kanal &drugi, Kanal &trzeci, Kanal &czwarty, Statek *plynacy ){
	
	
	if ((pierwszy.zajetosc == 0) && (pierwszy.glebokosc >= plynacy->zanurzenie)){ return 1; }
	if ((drugi.zajetosc == 0) && (drugi.glebokosc >= plynacy->zanurzenie)){ return 1; }
	if ((trzeci.zajetosc == 0) && (trzeci.glebokosc >= plynacy->zanurzenie)){ return 1; }
	if ((czwarty.zajetosc == 0) && (czwarty.glebokosc >= plynacy->zanurzenie)){ return 1; }
	return 0;

}


Kanal wyborKanalu(Kanal &pierwszy, Kanal &drugi, Kanal &trzeci, Kanal &czwarty, Statek *plynacy ){
	int min= 100;
	Kanal temp;
	if ((pierwszy.zajetosc == 0) && (pierwszy.glebokosc >= plynacy->zanurzenie)){ if (pierwszy.glebokosc - plynacy->zanurzenie < min){ min = pierwszy.glebokosc - plynacy->zanurzenie; temp = pierwszy; } }
	if ((drugi.zajetosc == 0) && (drugi.glebokosc >= plynacy->zanurzenie)){ if (pierwszy.glebokosc - plynacy->zanurzenie < min){ min = pierwszy.glebokosc - plynacy->zanurzenie; } }
	if ((trzeci.zajetosc == 0) && (trzeci.glebokosc >= plynacy->zanurzenie)){ if (pierwszy.glebokosc - plynacy->zanurzenie < min){ min = pierwszy.glebokosc - plynacy->zanurzenie; } }
	if ((czwarty.zajetosc == 0) && (czwarty.glebokosc >= plynacy->zanurzenie)){ if (pierwszy.glebokosc - plynacy->zanurzenie < min){ min = pierwszy.glebokosc - plynacy->zanurzenie; } }
	
	
	
	return temp;

}




void Symulacja()
{
//miejsce symulacji


	//>!Stworzenie portu

	Port MojPort;
	cout << "port     " << MojPort.dzwigi << "port     ";



	//! Sworzenie kanalow
	Kanal KanalJeden(8);
	Kanal KanalDwa(12);
	Kanal KanalTrzy(20);
	Kanal KanalCztery(25);

	//!Stworzenie kolejek
	Kolejka DoKanaluDoPortu;
	Kolejka DoKanaluZPortu;




	//!Stworzenie statku
	
	Statek *pierwszy =new Statek();
	cout << "pierwszy statek przeprowadzamy\n";
	pierwszy->dodanieStatku();
	cout << pierwszy->typ << " masa " << pierwszy->masa << "   " << pierwszy->ppz << "   " << pierwszy->wymaganeProwadnice << "  " << pierwszy->wymaganeDzwigi << "   " << pierwszy->wymaganeRampy;
	
	
	//tor zajety i kanal zajety to chce wsadzic do kolejki
	if (czyMozeWplynac(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, pierwszy) && MojPort.czyMogeWplynac(pierwszy))
	{
		//wprowadzam do odpowiedniego kanalu i zajmuje narzedzia 
		Kanal temp;
		temp = wyborKanalu(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, pierwszy);
		temp.zajecieKanalu(pierwszy);
		MojPort.zajecieNarzedzi(pierwszy);

	}
	else
	{
		//umieszczam w kolejce
		DoKanaluDoPortu.statekZajmujeMiejsce(pierwszy);

		
	}


	//usuwam z kolejki wkladam do toru jesli moge
	//obluga portu sprawdzammy ktore moga maja koniec obslugi 

	//wprowadzam do kolejki z portu do morza

	 //po wplynieciu dio kanalau zwalniam zasoby 
	//usuwam statek jak wyszedl z portu 
	








	//usuwanie z kolejki i funkcje dzieki ktorej bede sprawdzal wolne zasoby i jesli sa wolne opuszczam kolejke zajmuuje kanal 




	//1 stworzenie obiektow 
	//-portu
	//- kanalow
	//- statkow

	/*-Statek tworzymy okreslony statek
	+ sprawdzamy czy sa wolne narzedzia
	+ sprawdzamy czy sa wolne tory
	- jezeli nie wrzucamy go do kolejki
	- sprawdzamy czy zwolnilo sie miejsce
	- jezeli jest wiecej statkow to jezeeli nie ma wystarczajaco duzo narzedzi sprawdzamy inne statki(wybieramy statek ktory->wsp masa i ...)
	- jezeli moze sa narzedzial wplywamy i zajmujemu tor oraz narzedzia(tor ktory wybiuerzemy mamy wybrac jak najlepiej tzn.pod wzgledem masy i szybkosci kt)

	- zostajemy obslugiwani
	- sprawdzamy czy tory sa wolne zeby wrocic jezeli nie zajmujemy kolejke.

	*/
	srand(time(NULL));
	int ab;
	Statek proba;
	ab = proba.losowanieStatku();
	cout << ab;
	cin >> ab;





}


/////////////////////////////////////////////////
//***********************************************
#endif /*SYMULACJA_H*/  