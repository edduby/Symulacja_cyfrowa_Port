/********************************************//**
* \file symulacja.h
* \brief Definicja obiektu symulacja
* \author Maciej Maciejewski
* \date   2015-04-23
***********************************************/

#include "sc.h"
#ifndef SIMULACJA_H
#define SIMULACJA_H
/////////////////////////////////////////////////
/*! \brief Symulacja.
*
*	Implementacja Symulacji.
*
*/

int czasGlobalny; 
//void sprawdzamDostepnoscZajmuje(Port pierwszy, Kanal wybrany){

//	if (pierwszy.czyMogeWplynac || (wybrany.zajetosc == 0)){
	//}
	//else
	//{
	//}

//}




void Symulacja()
{





	////! Stworzenie kolejek
	//	Kolejka jeden;

	//
	//	//! Stworzenie statku
	//	Statek *pierwszy2;
	//	Statek *pierwszy3;
	//	Statek *pierwszy4;
	//	Statek *pierwszy5;
	//	Statek *pierwszy6;
	//	Statek *pierwszy7;

	//	Zrodlo generacja;
	//	pierwszy2 = generacja.generacjaStatku();
	//	pierwszy3 = generacja.generacjaStatku();
	//	pierwszy4 = generacja.generacjaStatku();
	//	pierwszy5 = generacja.generacjaStatku();
	//	pierwszy6 = generacja.generacjaStatku();
	//	pierwszy7 = generacja.generacjaStatku();
	//	//jezeli narzedzia sa zajete i kanal  to wedruje do kolejki
	//	Kanal KanalJeden(8, 1);
	//	Kanal KanalDwa(12,2);
	//	Kanal KanalTrzy(20,3);
	//	Kanal KanalCztery(25,4);
	//	Port MojPort;
	//		//umieszczam w kolejce
	//		jeden.statekZajmujeMiejsce(pierwszy2);
	//		jeden.statekZajmujeMiejsce(pierwszy3);
	//		jeden.statekZajmujeMiejsce(pierwszy4);
	//		jeden.statekZajmujeMiejsce(pierwszy5);
	//		jeden.statekZajmujeMiejsce(pierwszy6);
	//		jeden.statekZajmujeMiejsce(pierwszy7);
	//		
	//		jeden.wyborStatkuDoZwolnienia(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, MojPort);
	//		jeden.wyborStatkuDoZwolnienia(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, MojPort);
	//		jeden.wyborStatkuDoZwolnienia(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, MojPort);
	//		jeden.wyborStatkuDoZwolnienia(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, MojPort);













//	int seeds[4];
//
//	int seed = 1234, idx = 0;
//
//	for (int i = 0; i < 4 * 10000; i++)
//	{
//		Uniform(seed);
//
//		if (!(i % 10000))
//		{
//			seeds[idx++] = seed;
//			std::cout << seed << endl;
//		}
//	}
//
//	
//
//
//
//
//
//
//
//
//
//
//
//
////miejsce symulacji
//	Kanal temp; // zmnienna pommocnicza
//
//	//>!Stworzenie portu
//
//	Port MojPort;
//	//cout << "port     " << MojPort.dzwigi << "port     ";
//
//
//
//	//! Sworzenie kanalow
//	Kanal KanalJeden(8,1);
//	Kanal KanalDwa(12,2);
//	Kanal KanalTrzy(20,3);
//	Kanal KanalCztery(25,4);
//
//	//! Stworzenie kolejek
//	Kolejka DoKanaluDoPortu;
//	Kolejka DoKanaluZPortu;
//
//	//! Stworzenie statku
//	Statek *pierwszy;
//	Zrodlo generacja;
//	pierwszy = generacja.generacjaStatku();
//	
//	//jezeli narzedzia sa zajete i kanal  to wedruje do kolejki
//	if ((pierwszy->czyMozeWplynac(KanalJeden, KanalDwa, KanalTrzy, KanalCztery) && MojPort.czyMogeWplynac(pierwszy))==0)
//	{
//		//umieszczam w kolejce
//		DoKanaluDoPortu.statekZajmujeMiejsce(pierwszy);
//
//	}
//
//	//usuwam z kolejki wkladam do toru jesli moge
//	if (DoKanaluDoPortu.czyPusta() != NULL){//sprawdzam czy kolejka jest pusta
//		cout << "sprawdza czy koeljka jest pusta" << endl;
//		Statek *tmp = DoKanaluDoPortu.wyborStatkuDoZwolnienia(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, MojPort); //funkcja zwraca wskaznik na NULL jezeli zaden ze statkow w kolejce nie moze wplynac do kanalu 
//		if (tmp != NULL)//jezeli jest statek ktory w kolejce nadaje sie do usuniecia usuwamy go z kolejki 
//		{
//			cout << "kolejka nie jest pusta" << endl;
//			DoKanaluDoPortu.statekZwalniaMiejsce(tmp);
//
//			temp = pierwszy->wyborKanalu(KanalJeden, KanalDwa, KanalTrzy, KanalCztery);
//			temp.zajecieKanaluZ(pierwszy);
//			MojPort.zajecieNarzedzi(pierwszy);
//
//			//Po wplynieciu do portu zwalniam kanal
//			
//		}
//
//
//	}
//
//	else{
//		cout << "koeljak jest pusta" << endl;
//		//wprowadzam do odpowiedniego kanalu i zajmuje narzedzia 
//		temp = pierwszy->wyborKanalu(KanalJeden, KanalDwa, KanalTrzy, KanalCztery);
//		temp.zajecieKanaluZ(pierwszy);
//		MojPort.zajecieNarzedzi(pierwszy);
//		
//	}
//	temp.zwolnienieKanalu();//zwalniamy kanal statku ktory zostal obslugiwany 
//
//	//obluga portu sprawdzammy ktore maja koniec obslugi 
//	//wprowadzam do kolejki "z portu do morza"
//
//	if (pierwszy->czyMozeWplynac(KanalJeden, KanalDwa, KanalTrzy, KanalCztery)){//wyplywanie z portu 
//		temp = pierwszy->wyborKanalu(KanalJeden, KanalDwa, KanalTrzy, KanalCztery);
//		temp.zajecieKanaluZ(pierwszy);
//		MojPort.zwolnienieNarzedzi(pierwszy);
//	
//	}
//	else
//	{
//		DoKanaluZPortu.statekZajmujeMiejsce(pierwszy);
//	}
//
//	if (DoKanaluZPortu.czyPusta() != NULL){//sprawdzam czy kolejka jest pusta
//
//		Statek *tmp = DoKanaluZPortu.wyborStatkuDoZwolnienia(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, MojPort);
//		if (tmp != NULL)//jezeli jest statek ktory w kolejce nadaje sie do usuniecia usuwamy go z kolejki
//		{
//			DoKanaluZPortu.statekZwalniaMiejsce(tmp);
//
//			temp = pierwszy->wyborKanalu(KanalJeden, KanalDwa, KanalTrzy, KanalCztery);
//			temp.zajecieKanaluZ(pierwszy);
//			MojPort.zwolnienieNarzedzi(pierwszy);
//		}
//
//
//	}
//
//	
//	
//DoKanaluZPortu.statekZajmujeMiejsce(pierwszy);
//
//	Statek *tmp = DoKanaluZPortu.wyborStatkuDoZwolnienia(KanalJeden, KanalDwa, KanalTrzy, KanalCztery, MojPort);
//	if (tmp != NULL)
//	{
//	DoKanaluZPortu.statekZwalniaMiejsce(tmp);
//
//		temp = pierwszy->wyborKanalu(KanalJeden, KanalDwa, KanalTrzy, KanalCztery);
//		temp.zajecieKanaluZ(pierwszy);
//		MojPort.zwolnienieNarzedzi(pierwszy);
//	}
//
//
//
//
//
//
//	cout << "Pierwszy statek zostaje przeprowadzony i usuniety" << endl;
//	//Zwalniamy kanal i usuwamy statek
//	//gdzie temp to bedzie kanal ktoremu skonczyla sie obsluga
//	temp.zwolnienieKanalu();
//	delete pierwszy;
//	 //po wplynieciu dio kanalau zwalniam zasoby 
//	//usuwam statek jak wyszedl z kanalu
//	
//
//
//
//
//	//usuwanie z kolejki i funkcje dzieki ktorej bede sprawdzal wolne zasoby i jesli sa wolne opuszczam kolejke zajmuuje kanal 
//	//1 stworzenie obiektow 
//	//-portu
//	//- kanalow
//	//- statkow
//
//	/*-Statek tworzymy okreslony statek
//	+ sprawdzamy czy sa wolne narzedzia
//	+ sprawdzamy czy sa wolne tory
//	- jezeli nie wrzucamy go do kolejki
//	- sprawdzamy czy zwolnilo sie miejsce
//	- jezeli jest wiecej statkow to jezeeli nie ma wystarczajaco duzo narzedzi sprawdzamy inne statki(wybieramy statek ktory->wsp masa i ...)
//	- jezeli moze sa narzedzial wplywamy i zajmujemu tor oraz narzedzia(tor ktory wybiuerzemy mamy wybrac jak najlepiej tzn.pod wzgledem masy i szybkosci kt)
//
//	- zostajemy obslugiwani
//	- sprawdzamy czy tory sa wolne zeby wrocic jezeli nie zajmujemy kolejke.
//
//
//
//	rozladowac , nalDOWAC PONOWNIE
//	*/
////	srand(time(NULL));
//
//
//
//
//
//
//
//


	double lambda_1 = 6.;
	double lambda_2 = 1.5;
	Event * current = NULL;
	int M = 10;
	int seeden = 23114;
	for (int m = 0; m < M; m++)
	{
		//---------------------------------------
		// Initialize model:
		//---------------------------------------

		symulacja::sim_clock = 0.0; 
		symulacja::agenda.schedule(new pojawienieSieStatku(lambda_1,seeden));
		//---------------------------------------
		// Transient phase:
		//---------------------------------------

		while (symulacja::sim_clock < 10.)
		{

			current = symulacja::agenda.remove_first();

			symulacja::sim_clock = current->event_time;
			cout << symulacja::sim_clock << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n";
			current->execute();

			delete current;
		}

		symulacja::steady_start = symulacja::sim_clock;

	//	reset_statistics();

		//---------------------------------------
		// Steady-state:
		//---------------------------------------

		while (symulacja::sim_clock < symulacja::steady_start + 10.)
		{
			current = symulacja::agenda.remove_first();

			symulacja::sim_clock = current->event_time;
			cout << symulacja::sim_clock << "========================================\n/n\n";
			current->execute();

			delete current;
		}

	
	}

















	int ab=5;
	Statek proba;
	ab = proba.losowanieStatku();
	cout << ab;
	double ku = 3;
	int ka = 40000; cout << "\n"; cout << "\n";
	system("pause");




}


/////////////////////////////////////////////////
//***********************************************
#endif /*SYMULACJA_H*/  